<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 151e61773c016edcae8fd4989ad9a86ffd03c283 Maintainer: leszek Status: ready -->
<!-- $Revision$ -->
<refentry xml:id="function.session-start" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>session_start</refname>
  <refpurpose>Rozpoczyna nową lub wznawia istniejącą sesję</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>session_start</methodname>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>session_start</function> tworzy sesję lub wznawia
   bieżącą na podstawie identyfikatora sesji przekazanego przy wywołaniu poprzez metodę GET lub POST,
   lub też przekazanego przez ciasteczko.
  </para>
  <para>
   Gdy wywołane jest <function>session_start</function> lub gdy sesja rozpoczyna się automatycznie,
   PHP wywoła funkcje obsługi otwarcia, odczytu i zapisu sesji. Będą to albo wbudowane funkcje obsługi
   dostarczone domyślnie lub dostarczone przez rozszerzenia PHP (jak np. SQLite lub Memcached); lub może
   to być własna funkcja obsługi ustawiona przez <function>session_set_save_handler</function>.
   Funkcja zwrotna odczytu pobierze istniejące dane sesji (zapisane w specjalnym zserializowanym formacie),
   dane te zostaną odserializowane i użyte do automatycznego ustawienia superglobalnej $_SESSION, gdy
   funkcja zwrotna odczytu zwróci zapisane dane sesji do modułu obsługi sesji wbudowanego w PHP.
  </para>
  <para>
   Aby użyć nazwanej sesji, wywołaj
   <function>session_name</function> przed wywołaniem
   <function>session_start</function>.
  </para>
  <para>
   Jeśli opcja <link linkend="ini.session.use-trans-sid">session.use_trans_sid</link>
   jest włączona, funkcja <function>session_start</function>
   zarejestruje wewnętrzną funkcję obsługi wyjścia do przepisywania adresów URL.
  </para>
  <para>
   Jeżeli użytkownik używa <literal>ob_gzhandler</literal> lub podobnych z
   <function>ob_start</function>, ważna staje się kolejność wywołania tych funkcji.
   Przykładowo,
   <literal>ob_gzhandler</literal> musi zostać wywołana przed rozpoczęciem sesji.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>options</parameter></term>
    <listitem>
     <para>
      Jeżeli podano, to jest to tablica asocjacyjna opcji, które nadpiszą
      obecnie ustawione
      <link linkend="session.configuration">opcje konfiguracyjne sesji</link>.
      Klucze nie powinny zawierać prefiksu <literal>session.</literal>.
     </para>
     <para>
      Poza standardową listą opcji konfiguracyjnych,
      może też zostać podana opcja <literal>read_and_close</literal>. Jeśli ustawiona jest ona na
      &true;, to sesja będzie zamknięta natychmiast po jej
      odczytaniu, zapobiegając w ten sposób niepotrzebnemu blokowaniu, jeśli dane sesji
      nie będą zmieniane.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Ta funkcja zwraca &true; jeśli sesja została pomyślnie rozpoczęta,
   w przeciwnym wypadku zwraca &false;.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.1.0</entry>
       <entry>
        <function>session_start</function> zwraca teraz &false; i nie
        inicjalizuje już <varname>$_SESSION</varname>, jeśli nie udało się rozpocząć
        sesji.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <refsect2>
   <title>Podstawowy przykład sesji</title>

   <para>
    <example>
     <title><filename>strona1.php</filename></title>
     <programlisting role="php">
<![CDATA[
<?php
// strona1.php

session_start();

echo 'Witaj na stronie #1';

$_SESSION['kolor']    = 'zielony';
$_SESSION['zwierze']  = 'kot';
$_SESSION['czas']     = time();

// Działa jeśli ciasteczko sesyjne zostało zaakceptowane
echo '<br /><a href="strona2.php">strona 2</a>';

// Lub może przekaż ciasteczko sesyjne, jeśli to konieczne
echo '<br /><a href="page2.php?' . SID . '">page 2</a>';
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Po odwiedzeniu strony <filename>strona1.php</filename>, druga strona,
    <filename>strona2.php</filename> będzie magicznie zawierała dane sesji.
    W rozdziale <link linkend="ref.session">Sesje</link> znajduje się więcej
    informacji na temat <link linkend="session.idpassing">propagowania
    identyfikatora sesji</link>, gdzie można znaleźć na przykład
    wytłumaczenie co zawiera stała <constant>SID</constant>.
   </para>
   <para>
    <example>
     <title><filename>strona2.php</filename></title>
     <programlisting role="php">
<![CDATA[
<?php
// strona2.php

session_start();

echo 'Witaj na stronie #2<br />';

echo $_SESSION['kolor'];   // zielony
echo $_SESSION['zwierze']; // kot
echo date('Y m d H:i:s', $_SESSION['czas']);

// Możesz chcieć użyć tutaj SID, jak zrobiliśmy to w strona1.php
echo '<br /><a href="page1.php">strona 1</a>';
?>
]]>
     </programlisting>
    </example>
   </para>
  </refsect2>
  <refsect2>
   <title>Podawanie opcji do <function>session_start</function></title>

   <example>
    <title>Nadpisanie czasu życia ciasteczka</title>
    <programlisting role="php">
<![CDATA[
<?php
// Wyśle to ciasteczko ważne przez jeden dzień.
session_start([
    'cookie_lifetime' => 86400,
]);
?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Odczyt sesji i jej zamknięcie</title>
    <programlisting role="php">
     <![CDATA[
<?php
// Jeśli wiemy, że nie będziemy zmieniać nic w
// sesji, to możemy po prostu odczytać i natychmiast zamknąć sesję
// aby uniknąć blokowania pliku sesji, i blokowania innych stron
session_start([
    'cookie_lifetime' => 86400,
    'read_and_close'  => true,
]);
]]>
    </programlisting>
   </example>
  </refsect2>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Jeśli używasz sesji opartych o ciasteczka, to <function>session_start</function>
    musi być wywołane przed wysłaniem jakichkolwiek danych do przeglądarki.
   </para>
  </note>
  <note>
   <para>
    Wskazane jest użycie <link linkend="ini.zlib.output-compression">zlib.output_compression</link>
    zamiast <literal>ob_gzhandler</literal>
   </para>
  </note>
  <note>
   <para>
    Ta funkcja wysyła kilka nagłówków HTTP, w zależności od
    ustawień. Zobacz dokumentację <function>session_cache_limiter</function>,
    aby dowiedzieć się, jak dostosować te nagłówki.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><varname>$_SESSION</varname></member>
    <member>
     Opcja konfiguracyjna <link linkend="ini.session.auto-start">session.auto_start</link>
    </member>
    <member><function>session_id</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
