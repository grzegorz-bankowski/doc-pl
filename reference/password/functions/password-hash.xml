<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 762b61c66262a1e0c329dacdcc3be6f1702c299d Maintainer: sobak Status: ready -->
<!-- $Revision$ -->
<refentry xml:id="function.password-hash" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>password_hash</refname>
  <refpurpose>Tworzy hash hasła</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>password_hash</methodname>
   <methodparam><modifier role="attribute">#[\SensitiveParameter]</modifier><type>string</type><parameter>password</parameter></methodparam>
   <methodparam><type class="union"><type>string</type><type>int</type><type>null</type></type><parameter>algo</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>password_hash</function> tworzy hash hasła używając silnego, jednokierunkowego
   algorytmu.
  </para>
  <simpara>
   Następujące algorytmy są obecnie wspierane:
  </simpara>
  <para>
   <itemizedlist>
    <listitem>
     <simpara>
      <constant>PASSWORD_DEFAULT</constant> - Używa algorytmu bcrypt (domyślny od PHP 5.5.0).
      Zwróć uwagę, że ta stała jest zaprojektowana, aby być zmieniona po czasie, gdy pojawią się
      nowe, silniejsze algorytmy. Z tego powodu długość wyjścia przy użyciu tej stałej może zmienić
      się z czasem. Dlatego jest zalecane, aby trzymać wynik w kolumnie bazy danych, która może
      pomieścić więcej niż 60 znaków (255 znaków powinno być dobrym wyborem).
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <constant>PASSWORD_BCRYPT</constant> - Używa algorytmu <constant>CRYPT_BLOWFISH</constant> do
      stworzenia hasha. To ustawienie zwróci hash kompatybilny z <function>crypt</function> używając
      identyfikatora "$2y$". Rezultatem tej funkcji będzie zawsze 60-znakowy ciąg&return.falseforfailure;.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <constant>PASSWORD_ARGON2I</constant> - Używa algorytmu Argon2i do stworzenia hasha.
      Ten algorytm jest dostępny tylko, jeśli PHP został skompilowany z obsługą Argon2.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <constant>PASSWORD_ARGON2ID</constant> - Używa algorytmu Argon2id do stworzenia hasha.
      Ten algorytm jest dostępny tylko, jeśli PHP został skompilowany z obsługą Argon2.
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
  <simpara>
   Obsługiwane opcje dla <constant>PASSWORD_BCRYPT</constant>:
  </simpara>
  <para>
   <itemizedlist>
    <listitem>
     <para>
      <literal>salt</literal> (<type>string</type>) - pozwala na ręczne podanie soli przy generowaniu hasła.
      Zwróć uwagę, że to ustawienie zapobiegnie automatycznemu wygenerowaniu soli.
     </para>
     <para>
      Jeżeli pomięto, losowa sól zostanie wygenerowana przez <function>password_hash</function>
      dla każdego hasła. Jest to zalecany sposób postępowania.
     </para>
     <warning>
      <para>
       Opcja salt jest przestarzała. Zaleca
       się teraz, aby po prostu skorzystać z domyślnie wygenerowanej soli.
       Od PHP 8.0.0 podana jawnie sól jest ignorowana.
      </para>
     </warning>
    </listitem>
    <listitem>
     <para>
      <literal>cost</literal> (<type>int</type>) - oznacza koszt algorytmu, który powinien zostać użyty.
      Przykładowe wartości można znaleźć na stronie funkcji <function>crypt</function>.
     </para>
     <para>
      Jeżeli pominięto, to zostanie użyta domyślna wartość <literal>10</literal>. Stanowi ona rozsądny
      koszt wyjściowy, ale możesz rozważyć jego zwiększenie w zależności od sprzętu, którym dysponujesz.
     </para>
    </listitem>
   </itemizedlist>
  </para>
  <simpara>
   Wspierane opcja dla <constant>PASSWORD_ARGON2I</constant>
   i <constant>PASSWORD_ARGON2ID</constant>:
  </simpara>
  <para>
   <itemizedlist>
    <listitem>
     <para>
      <literal>memory_cost</literal> (<type>int</type>) - Maksymalna ilość pamięci (w bajtach), która może
      być użyta, aby obliczyć hash Argon2. Domyślnie ma wartość <constant>PASSWORD_ARGON2_DEFAULT_MEMORY_COST</constant>.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>time_cost</literal> (<type>int</type>) - Maksymalna ilość czasu, która
      może być użyta, aby obliczyć hash Argon2. Domyślnie ma wartość <constant>PASSWORD_ARGON2_DEFAULT_TIME_COST</constant>.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>threads</literal> (<type>int</type>) - Liczba wątków, których należy użyć dla obliczenia
      hasha Argon2. Domyślna wartość to <constant>PASSWORD_ARGON2_DEFAULT_THREADS</constant>.
     </para>
     <warning>
      <para>
       Dostępne tylko gdy PHP używa libargon2, nie implementacji libsodium.
      </para>
     </warning>
    </listitem>
   </itemizedlist>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>hasło</parameter></term>
    <listitem>
     <para>
      &password.parameter.password;
     </para>
      <caution>
       <para>
        Użycie <constant>PASSWORD_BCRYPT</constant> jako
        algorytmu spowoduje, że parametr
        <parameter>password</parameter> zostanie przycięty do
        maksymalnie 72 bajtów. 
       </para>
      </caution>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>algorytm</parameter></term>
    <listitem>
     <para>
      &password.parameter.algo;
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>options</parameter></term>
    <listitem>
     <para>
      &password.parameter.options;
     </para>
     <para>
      Jeżeli pominięte, zostanie wygenerowana losowa sól i zostanie użyty
      domyślny koszt.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Zwraca zahashowane hasło.
  </para>
  <para>
   Użyty algorytm, koszt oraz sól są zwracane jako część hasha. Dzięki temu
   wszystkie informacje potrzebne do zweryfikowania hasha są zawarte w nim samym.
   Pozwala to na użycie funkcji <function>password_verify</function> bez konieczności
   trzymania soli lub informacji o algorytmie osobno.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.3.0</entry>
       <entry>
        <function>password_hash</function> ustawia teraz używany pod maską wyjątek
        <exceptionname>Random\RandomException</exceptionname> jako
        <property>Exception::$previous</property> wyjątku
        <exceptionname>ValueError</exceptionname>, gdy ten rzucany jest przez niepowodzenie
        wygenerowania soli.
       </entry>
      </row>
      <row>
       <entry>8.0.0</entry>
       <entry>
        <function>password_hash</function> nie zwraca już &false; w wypadku błędu; zamiast tego
        rzucony zostanie <classname>ValueError</classname> jeśli algorytm hashujący jest
        niepoprawny lub <classname>Error</classname> jeśli hashowanie hasła nie powiodło się
        ze względu na nieznany błąd.
       </entry>
      </row>
      <row>
       <entry>8.0.0</entry>
       <entry>
        Parametr <parameter>algo</parameter> dopuszcza teraz &null;.
       </entry>
      </row>
      <row>
       <entry>7.4.0</entry>
       <entry>
        Parametr <parameter>algo</parameter> oczekuje teraz typu &string;, ale wciąż przyjmuje
        liczby (&integer;) ze względu na kompatybilność wsteczną.
       </entry>
      </row>
      <row>
       <entry>7.4.0</entry>
       <entry>
        Rozszerzenie sodium zapewnia alternatywną implementację dla haseł Argon2.
       </entry>
      </row>
      <row>
       <entry>7.3.0</entry>
       <entry>
        Dodano wsparcie dla haseł Argon2id przy użyciu <constant>PASSWORD_ARGON2ID</constant>.
       </entry>
      </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        Dodano wsparcie dla haseł Argon2i przy użyciu <constant>PASSWORD_ARGON2I</constant>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Przykład użycia <function>password_hash</function></title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * Chcemy po prostu hahashować nasze hasło przy użyciu domyślnego algorytmu
 * Obecnie jest to BCRYPT i zwróci 60-znakowy hash.
 *
 * Pamiętaj, że domyślny algorytm może z czasem ulec zmianie, więc przygotuj się
 * zwiększając ilość znaków w bazie danych na więcej niż 60 (255 będzie dobrym wyborem)
 */
echo password_hash("rasmuslerdorf", PASSWORD_DEFAULT);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
$2y$10$.vGA1O9wmRjrwAVXD98HNOgsNpDczlqm3Jq7KnEd1rVAGv3Fykk1a
]]>
    </screen>
   </example>
  </para> 
  <para>
   <example>
    <title>Ręczne ustawianie kosztu</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * W tym wypadku chcemy zwiększyć domyślny koszt dla BCRYPT do 12.
 * Zauważ także, że przełączyliśmy się na BCRYPT, który zawsze zwróci
 * 60 znaków
 */
$options = [
    'cost' => 12,
];
echo password_hash("rasmuslerdorf", PASSWORD_BCRYPT, $options)."\n";
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
$2y$12$QjSH496pcT5CEbzjD/vtVeH03tfHKFy36d4J0Ltp3lRtee9HDxY3K
]]>
    </screen>
   </example>
  </para>
  
  <para>
   <example>
    <title>Znajdowanie optymalnego kosztu</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * Ten kod sprawdzi wydajność Twojego serwera, aby określić jak wysoki koszt można
 * ustawić. Będziesz chciał ustawić najwyższy możliwy koszt, który nie spowolni
 * Twojego serwera zbyt mocno. 10 to dobra wartość wyjściowa, a większa jest dobra jeśli
 * Twoje serwery są wystarczająco szybkie. Kod poniżej szuka czasu ≤ 350 milisekund,
 * co wydaje się być odpowiednim opóźnieniem dla systemów obsługujących logowanie interaktywne.
 */
$timeTarget = 0.350; // 350 milisekund

$cost = 10;
do {
    $cost++;
    $start = microtime(true);
    password_hash("test", PASSWORD_BCRYPT, ["cost" => $cost]);
    $end = microtime(true);
} while (($end - $start) < $timeTarget);

echo "Odpowiedni koszt znaleziony: " . $cost;
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Odpowiedni koszt znaleziony: 12
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Przykład użycia <function>password_hash</function> z Argon2i</title>
    <programlisting role="php">
<![CDATA[
<?php
echo 'Hash Argon2i: ' . password_hash('rasmuslerdorf', PASSWORD_ARGON2I);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Hash Argon2i: $argon2i$v=19$m=1024,t=2,p=2$YzJBSzV4TUhkMzc3d3laeg$zqU/1IN0/AogfP4cmSJI1vc8lpXRW9/S0sYY2i2jHT0
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <caution>
   <para>
    Jest wysoce zalecane, aby nie generować soli dla tej funkcji 
    samodzielnie. Bezpieczna sól zostanie dla Ciebie stworzona automatycznie, jeżeli
    nie podasz żadnej.
   </para>
   <para>
    Jak podano wyżej, użycie opcji <literal>salt</literal> w PHP 7.0
    wygeneruje ostrzeżenie o przestarzałym kodzie. Wsparcie dla ręcznego podawania soli
    zostało usunięte w PHP 8.0.
   </para>
  </caution>
  <note>
   <para>
    Zaleca się, aby przetestować tę funkcję na swoim serwerze i dostosować koszt, tak aby
    wykonanie funkcji zajmowało mniej niż 350 milisekund dla systemów interaktywnych.
    Skrypt powyżej pozwoli Ci wybrać odpowiednią wartość dla Twojego sprzętu.
   </para>
  </note>
  <note>
   <simpara>
    Aktualizacje algorytmów dla tej funkcji (lub zmiana domyślnego) muszą odbywać się według
    następujących zasad:
   </simpara>
   <para>
    <itemizedlist>
     <listitem>
      <simpara>
      Algorytm musi być obecny w rdzeniu PHP przynajmniej od jednego pełnego wydania, zanim
      będzie mógł stać się domyślnym. Więc jeżeli przykładowo nowy algorytm został dodany 
      w wersji 7.5.5, nie będzie mógł być domyślnym do wersji 7.7 (jako że wersja 7.6 
      stanowi pierwsze pełne wydanie). Jeżeli jednak inny algorytm zostanie dodany 
      w 7.6.0, to będzie mógł zostać domyślnym od wersji 7.7.0.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Domyślny algorytm powinien zmieniać się jedynie w pełnych wydaniach (7.3.0, 8.0.0 itd.).
       Jedynym wyjątkiem od tej reguły jest sytuacja, gdy zostanie znaleziona krytyczna luka
       bezpieczeństwa w obecnie domyślnym algorytmie.
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>password_verify</function></member>
    <member><function>password_needs_rehash</function></member>
    <member><function>crypt</function></member>
    <member><function>sodium_crypto_pwhash_str</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
