<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: c2eca73ef79ebe78cebb34053e41b565af504c4f Maintainer: sobak Status: ready -->
<!-- $Revision$-->
<!-- splitted from ./en/functions/pgsql.xml, last change in rev 1.2 -->
<!-- CREDITS: garbus, jarek -->
<refentry xml:id="function.pg-query" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pg_query</refname>
  <refpurpose>Wykonuje zapytanie do bazy danych</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>PgSql\Result</type><type>false</type></type><methodname>pg_query</methodname>
   <methodparam choice="opt"><type>PgSql\Connection</type><parameter>connection</parameter></methodparam>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>pg_query</function> wykonuje zapytanie <parameter>query</parameter>
   na określonej parametrem <parameter>connection</parameter> bazie danych.
   W większości wypadków preferowane powinno być <function>pg_query_params</function>.
  </para>
  <para>
   Jeśli nadarzy się błąd, oraz zwracane jest &false;, jego szczegóły mogą
   zostać wydobyte dzięki użyciu funkcji <function>pg_last_error</function>,
   jeśli połączenie jest poprawne.
  </para>
  <para>
   <note>
    <simpara>
     Chociaż parametr <parameter>connection</parameter> można pominąć, nie jest 
     to zalecane, gdyż może to powodować trudne do znalezienia
     błędy w skrypcie.
    </simpara>
   </note>
  </para>
  <note>
   <para>
    Ta funkcja była poprzednio nazwana <literal>pg_exec()</literal>.
    <literal>pg_exec()</literal> jest wciąż dostępna w celu zachowania
    kompatybilności, ale zalecane jest używanie nowej nazwy.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>connection</parameter></term>
     <listitem>
      &pgsql.parameter.connection-with-unspecified-default;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>query</parameter></term>
     <listitem>
      <para>
       Polecenie lub polecenia SQL, do wykonania. Kiedy do funkcji podane zostanie więcej niż jedno zapytanie,
       wykonają się one automatycznie jako jedna operacja, chyba, że komendy BEGIN/COMMIT 
       są zawarte w zapytaniu. Niemniej jednak, używanie wielu operacji w jednym wywołaniu funkcji nie jest zalecane.
      </para>
      <warning>
       <para>
        Łączenie stringu zapytania z danymi pochodzącymi od użytkownika jest bardzo
        niebezpieczne i może prowadzić do podatności na <link linkend="security.database.sql-injection">
        SQL injection</link>. W większości wypadków powinno być preferowane
        użycie <function>pg_query_params</function>, a więc przekazywanie
        wartości pochodzących od użytkownika jako parametry, a nie bezpośrednie
        włączanie ich do łańcucha zapytania.
       </para>
       <para>
        Wszystkie dane od użytkowników, wstawiane bezpośrednio do łańucha zapytania
        powinny być <link linkend="function.pg-escape-string">odpowiednio zabezpieczone</link>.
       </para>
      </warning>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Obiekt <classname>PgSql\Result</classname> w wypadku powodzenia &return.falseforfailure;.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     &pgsql.changelog.return-result-object;
     &pgsql.changelog.connection-object;
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Przykład użycia <function>pg_query</function></title>
    <programlisting role="php">
<![CDATA[
<?php

$polaczenie = pg_pconnect("dbname=publisher");
if (!$polaczenie) {
  echo "Wystąpił błąd.\n";
  exit;
}

$wynik = pg_query($polaczenie, "SELECT autor, email FROM autorzy");
if (!$wynik) {
  echo "Wystąpił błąd.\n";
  exit;
}

while ($wiersz = pg_fetch_row($wynik)) {
  echo "Autor: $wiersz[0]  E-mail: $wiersz[1]";
  echo "<br />\n";
}
 
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Używanie <function>pg_query</function> z wieloma zapytaniami</title>
    <programlisting role="php">
<![CDATA[
<?php

$polaczenie = pg_pconnect("dbname=wydawca");

// te polecenia wykonają się jako jedna operacja

$zapytanie = "UPDATE autorzy SET autor=UPPER(autor) WHERE id=1;";
$zapytanie .= "UPDATE autorzy SET autor=LOWER(autor) WHERE id=2;";
$zapytanie .= "UPDATE autorzy SET autor=NULL WHERE id=3;";

pg_query($polaczenie, $zapytanie);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pg_connect</function></member>
    <member><function>pg_pconnect</function></member>
    <member><function>pg_fetch_array</function></member>
    <member><function>pg_fetch_object</function></member>
    <member><function>pg_num_rows</function></member>
    <member><function>pg_affected_rows</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
