<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: c2eca73ef79ebe78cebb34053e41b565af504c4f Maintainer: joeaccord Status: ready -->
<!-- $Revision$-->
<!-- splitted from ./en/functions/pgsql.xml, last change in rev 1.2 -->
<!-- CREDITS: jarek, garbus -->
<refentry xml:id="function.pg-send-query" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pg_send_query</refname>
  <refpurpose>
   Wysyła zapytanie asynchroniczne
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>int</type><type>bool</type></type><methodname>pg_send_query</methodname>
   <methodparam><type>PgSql\Connection</type><parameter>connection</parameter></methodparam>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>pg_send_query</function> wysyła asynchroniczne zapytanie lub zapytania do połączenia
   określonego przez <parameter>connection</parameter>. W przeciwieństwie do
   <function>pg_query</function>, pozwala wysłać jednorazowo wiele zapytań do PostgreSQL-a, na następnie
   pobrać wyniki jeden po drugim używając funkcji
   <function>pg_get_result</function>.
  </para>
  <para>
   Wykonywanie skryptu nie jest blokowane w czasie wykonywania zapytań. Możesz
   użyć <function>pg_connection_busy</function> aby sprawdzić czy połączenie jest
   nie jest zajęte (np. wykonuje się inne zapytanie). Zapytania mogą zostać przerwane przez użycie
   funkcji <function>pg_cancel_query</function>.
  </para>
  <para>
   Tak więc użytkownik może wysłać wiele zapytań jednocześnie, ale
   nie może ich wysyłać jeśli połączenie jest zajęte. Jeśli zapytanie będzie wysłane gdy
   połączenie jest zajęte, będzie oczekiwało aż wykona się poprzednie zapytanie
   i utracone zostaną wszystkie wyniki.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>connection</parameter></term>
     <listitem>
      &pgsql.parameter.connection;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>query</parameter></term>
     <listitem>
      <para>
       Instrukcja lub instrukcje SQL do wykonania.
      </para>
      <para>
       Dane w zapytaniu powinny posiadać <link linkend="function.pg-escape-string">znaki unikowe</link>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Zwraca &true; w wypadku powodzenia, &false; lub <literal>0</literal> w razie niepowodzenia.  Użyj <function>pg_get_result</function>,
   aby ustalić wynik zapytania.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     &pgsql.changelog.connection-object;
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Przykład <function>pg_send_query</function></title>
    <programlisting role="php">
<![CDATA[
<?php
  $polaczenie_z_baza = pg_connect("dbname=wydawca") or die("Nie można było się połączyć");

  if (!pg_connection_busy($polaczenie_z_baza)) {
      pg_send_query($polaczenie_z_baza, "select * from autorzy; select count(*) from autorzy;");
  }
  
  $wynik1 = pg_get_result($polaczenie_z_baza);
  echo "Pierwsze wywołanie pg_get_result(): $wynik1\n";
  $wiersze1 = pg_num_rows($wynik1);
  echo "$wynik1 ma $wiersze1 wpisów\n\n";
  
  $wynik2 = pg_get_result($polaczenie_z_baza);
  echo "Drugie wywołanie pg_get_result(): $wynik2\n";
  $wiersze2 = pg_num_rows($wynik2);
  echo "$wynik2 ma $wiersze2 wpisów\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Pierwsze wywołanie pg_get_result(): Resource id #3
Resource id #3 ma 8 wpisów

Drugie wywołanie pg_get_result(): Resource id #4
Resource id #4 ma 5 wpisów
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pg_query</function></member>
    <member><function>pg_cancel_query</function></member>
    <member><function>pg_get_result</function></member>
    <member><function>pg_connection_busy</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
