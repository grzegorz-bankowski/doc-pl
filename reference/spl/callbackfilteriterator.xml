<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 4d17b7b4947e7819ff5036715dd706be87ae4def	Maintainer: sobak Status: ready -->
<!-- $Revision$ -->
<reference xml:id="class.callbackfilteriterator" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>Klasa CallbackFilterIterator</title>
 <titleabbrev>CallbackFilterIterator</titleabbrev>

 <partintro>

<!-- {{{ CallbackFilterIterator intro -->
  <section xml:id="callbackfilteriterator.intro">
   &reftitle.intro;
   <para>

   </para>
  </section>
<!-- }}} -->

  <section xml:id="callbackfilteriterator.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis class="class">
    <ooclass>
     <classname>CallbackFilterIterator</classname>
    </ooclass>

    <ooclass>
     <modifier>extends</modifier>
     <classname>FilterIterator</classname>
    </ooclass>

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.callbackfilteriterator')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[@role='CallbackFilterIterator'])">
     <xi:fallback/>
    </xi:include>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.callbackfilteriterator')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[@role='CallbackFilterIterator'])">
     <xi:fallback/>
    </xi:include>

    <classsynopsisinfo role="comment">&InheritedMethods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.filteriterator')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[@role='FilterIterator'])">
     <xi:fallback/>
    </xi:include>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.iteratoriterator')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[@role='IteratorIterator'])">
     <xi:fallback/>
    </xi:include>
   </classsynopsis>
<!-- }}} -->

  </section>

  <!-- {{{ examples -->
  <section xml:id="callbackfilteriterator.examples">
   &reftitle.examples;
   <para>
    Funkcja zwrotna powinna przyjmować do trzech argumentów:
    kolejno obecny element, obecny klucz oraz iterator.
   </para>
   <example xml:id="callbackfilteriterator.examples.args">
    <title>Available callback arguments</title>
    <programlisting role="php">
<![CDATA[
<?php

/**
 * Funkcja zwrotna dla CallbackFilterIterator
 *
 * @param $current   Current item's value
 * @param $key       Current item's key
 * @param $iterator  Iterator being filtered
 * @return boolean   TRUE to accept the current item, FALSE otherwise
 */
function my_callback($current, $key, $iterator) {
    // Umieść Twój kod filtrujący tutaj
}

?>
]]>
    </programlisting>
   </example>
   <para>
    Można użyć dowolnego <type>callable</type>, takiego jak ciągu znaków zawierającego
    nazwę funkcji, tablicy opisującej metodę lub funkcji anonimowej.
   </para>
   <example xml:id="callbackfilteriterator.examples.basic">
    <title>Przykłady funkcji zwrotnej</title>
    <programlisting role="php">
<![CDATA[
<?php

$dir = new FilesystemIterator(__DIR__);

// Filtruj duże pliki ( > 100MB)
function is_large_file($current) {
    return $current->isFile() && $current->getSize() > 104857600;
}
$large_files = new CallbackFilterIterator($dir, 'is_large_file');

// Filtruj katalogi
$files = new CallbackFilterIterator($dir, function ($current, $key, $iterator) {
    return $current->isDir() && ! $iterator->isDot();
});

?>
]]>
    </programlisting>
   </example>
  </section>
  <!-- }}} -->


 </partintro>

 &reference.spl.entities.callbackfilteriterator;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
