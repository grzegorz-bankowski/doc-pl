<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 4d17b7b4947e7819ff5036715dd706be87ae4def Maintainer: sobak Status: ready -->
<!-- $Revision$ -->
<reference xml:id="class.splfixedarray" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>Klasa SplFixedArray</title>
 <titleabbrev>SplFixedArray</titleabbrev>
 
 <partintro>
 
<!-- {{{ splfixedarray intro -->
  <section xml:id="splfixedarray.intro">
   &reftitle.intro;
   <para>
    Klasa SplFixedArray oferuje główne funkcjonalności tablic. Główną
    różnicą między SplFixedArray a zwykłą tablicą w PHP jest fakt, że
    SplFixedArray musi mieć ręcznie zmieniony rozmiar i pozwala tylko na
    klucze numeryczne z określonego zakresu. Zaletą jest fakt, że używa mniej pamięci
    niż standardowy typ <type>array</type>.
   </para>
  </section>
<!-- }}} -->
 
  <section xml:id="splfixedarray.synopsis">
   &reftitle.classsynopsis;
 
<!-- {{{ Synopsis -->
   <classsynopsis class="class">
    <ooclass>
     <classname>SplFixedArray</classname>
    </ooclass>

    <oointerface>
     <modifier>implements</modifier>
     <interfacename>IteratorAggregate</interfacename>
    </oointerface>

    <oointerface>
     <interfacename>ArrayAccess</interfacename>
    </oointerface>

    <oointerface>
     <interfacename>Countable</interfacename>
    </oointerface>

    <oointerface>
     <interfacename>JsonSerializable</interfacename>
    </oointerface>

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.splfixedarray')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[@role='SplFixedArray'])">
     <xi:fallback/>
    </xi:include>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.splfixedarray')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[@role='SplFixedArray'])">
     <xi:fallback/>
    </xi:include>
   </classsynopsis>
 
  </section>

  <section role="changelog">
   &reftitle.changelog;
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.2.0</entry>
       <entry>
        Dodano metody magiczne <methodname>SplFixedArray::__serialize</methodname> oraz
        <methodname>SplFixedArray::__unserialize</methodname>
        do klasy <classname>SplFixedArray</classname>.
       </entry>
      </row>
      <row>
       <entry>8.1.0</entry>
       <entry>
        <classname>SplFixedArray</classname> implementuje teraz
        <interfacename>JsonSerializable</interfacename>.
       </entry>
      </row>
      <row>
       <entry>8.0.0</entry>
       <entry>
        <classname>SplFixedArray</classname> implementuje teraz
        <interfacename>IteratorAggregate</interfacename>.
        Wcześniej zamiast tego implementowany był <interfacename>Iterator</interfacename>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </section>

<!-- {{{ splfixedarray examples -->
  <section xml:id="splfixedarray.examples">
   &reftitle.examples;
   <para>
    <example>
     <title>Przykład użycia <classname>SplFixedArray</classname></title>
     <programlisting role="php">
<![CDATA[
<?php
// Zainicjalizuj tablicę o określonej długości
$array = new SplFixedArray(5);

$array[1] = 2;
$array[4] = "foo";

var_dump($array[0]); // NULL
var_dump($array[1]); // int(2)

var_dump($array["4"]); // string(3) "foo"

// Zwiększ rozmiar tablicy do 10
$array->setSize(10);

$array[9] = "asdf";

// Zmniejsz rozmiar tablicy do 2
$array->setSize(2);

// Poniższe linie spowodują rzucenie RuntimeException: Index invalid or out of range,
// czyli "niepoprawny indeks lub poza zakresem"
try {
    var_dump($array["indeks-nienumeryczny"]);
} catch(RuntimeException $re) {
    echo "RuntimeException: ".$re->getMessage()."\n";
}

try {
    var_dump($array[-1]);
} catch(RuntimeException $re) {
    echo "RuntimeException: ".$re->getMessage()."\n";
}

try {
    var_dump($array[5]);
} catch(RuntimeException $re) {
    echo "RuntimeException: ".$re->getMessage()."\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
NULL
int(2)
string(3) "foo"
RuntimeException: Index invalid or out of range
RuntimeException: Index invalid or out of range
RuntimeException: Index invalid or out of range
]]>
     </screen>
    </example>
   </para>
  </section>
<!-- }}} -->
 
<!-- {{{ splfixedarray properties
  <section xml:id="splfixedarray.props">
   &reftitle.properties;
   <variablelist>
    <varlistentry xml:id="splfixedarray.props.name">
     <term><varname>name</varname></term>
     <listitem>
      <para>Prop description</para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
}}} -->
 
 </partintro>
 
 &reference.spl.entities.splfixedarray;
 
</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
