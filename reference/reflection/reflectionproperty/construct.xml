<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c1aba02c4753e56b4ab5053a0ab5be8584cbf8bc Maintainer: sobak Status: ready -->
<!-- $Revision$ -->
<refentry xml:id="reflectionproperty.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ReflectionProperty::__construct</refname>
  <refpurpose>Tworzy obiekt ReflectionProperty</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <constructorsynopsis role="ReflectionProperty">
   <modifier>public</modifier> <methodname>ReflectionProperty::__construct</methodname>
   <methodparam><type class="union"><type>object</type><type>string</type></type><parameter>class</parameter></methodparam>
   <methodparam><type>string</type><parameter>property</parameter></methodparam>
  </constructorsynopsis>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>class</parameter></term>
     <listitem>
      <para>
       Ciąg znaków zawierający nazwę klasy lub obiekt klasy.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>property</parameter></term>
     <listitem>
      <para>
       Nazwa właściwości klasy, którą chcemy sprawdzać przez refleksję.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Próba pobrania lub ustawienia wartości dla właściwości prywatnej lub protected
   będzie skutkować rzuceniem wyjątku.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Przykład użycia <methodname>ReflectionProperty::__construct</methodname></title>
    <programlisting role="php">
<![CDATA[
<?php

class Str
{
    public $length  = 5;
}

// Stwórz obiekt klasy ReflectionProperty
$prop = new ReflectionProperty('Str', 'length');

// Wyświetl podstawowe informacje
printf(
    "===> Właściwość%s%s%s%s '%s' (która została %s)\n" .
    "     posiadająca modyfikatory %s\n",
        $prop->isPublic() ? ' publiczna' : '',
        $prop->isPrivate() ? ' prywatna' : '',
        $prop->isProtected() ? ' protected' : '',
        $prop->isStatic() ? ' statyczna' : '',
        $prop->getName(),
        $prop->isDefault() ? 'zadeklarowana w czasie kompilacji' : 'stworzona w czasie wykonywania programu',
        var_export(Reflection::getModifierNames($prop->getModifiers()), true)
);

// Stwórz instancję klasy Str
$obj= new Str();

// Pobierz obecną wartość
printf("---> Wartość to: ");
var_dump($prop->getValue($obj));

// Zmień wartość
$prop->setValue($obj, 10);
printf("---> Ustawiam wartość na 10, nowa wartość to: ");
var_dump($prop->getValue($obj));

// Zrzut obiektu
var_dump($obj);

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
===> Właściwość publiczna 'length' (która została zadeklarowana w czasie kompilacji)
     posiadająca modyfikatory array (
  0 => 'public',
)
---> Wartość to: int(5)
---> Ustawiam wartość na 10, nowa wartość to: int(10)
object(Str)#2 (1) {
  ["length"]=>
  int(10)
}
]]>
    </screen>
   </example>
   <example>
    <title>Pobranie wartości z właściwości prywatnych i protected przy użyciu klasy <classname>ReflectionProperty</classname></title>
    <programlisting role="php">
<![CDATA[
<?php

class Foo
{
    public $x = 1;
    protected $y = 2;
    private $z = 3;
}

$obj = new Foo;

$prop = new ReflectionProperty('Foo', 'y');
$prop->setAccessible(true);
var_dump($prop->getValue($obj)); // int(2)

$prop = new ReflectionProperty('Foo', 'z');
$prop->setAccessible(true);
var_dump($prop->getValue($obj)); // int(2)

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
int(2)
int(3)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>ReflectionProperty::getName</methodname></member>
    <member><link linkend="language.oop5.decon.constructor">Constructors</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
