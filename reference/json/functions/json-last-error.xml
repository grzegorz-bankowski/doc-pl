<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 8cdc6621f9826d04abc3e50438c010804d7e8683 Maintainer: joeaccord Status: ready -->
<!-- $Revision$ -->
<refentry xml:id="function.json-last-error" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>json_last_error</refname>
  <refpurpose>Zwraca ostatni błąd JSON</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>json_last_error</methodname>
   <void />
  </methodsynopsis>
  <para>
   Zwraca ostatni błąd, który wystąpił podczas kodowania/dekodowania JSON,
   które nie korzystało z flagi <constant>JSON_THROW_ON_ERROR</constant>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Zwraca kod błędu jako liczbę całkowitą. Wartość może być jedną z następujących
   stałych:
  </para>
  <table>
   <title>Kody błędów JSON</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>Stała</entry>
      <entry>Znaczenie</entry>
      <entry>Dostępność</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><constant>JSON_ERROR_NONE</constant></entry>
      <entry>Nie wystąpił żaden błąd</entry>
      <entry></entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_DEPTH</constant></entry>
      <entry>Przekroczono maksymalny poziom zagnieżdżenia danych</entry>
      <entry></entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_STATE_MISMATCH</constant></entry>
      <entry>Niepoprawny składniowo lub zniekształcony JSON</entry>
      <entry></entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_CTRL_CHAR</constant></entry>
      <entry>Błąd znaku kontrolnego. Prawdopodobnie został nieprawidłowo zakodowany</entry>
      <entry></entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_SYNTAX</constant></entry>
      <entry>Błąd składni</entry>
      <entry></entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_UTF8</constant></entry>
      <entry>Nieprawidłowe znaki UTF-8. Możliwe, że nieprawidłowo zakodowane</entry>
      <entry></entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_RECURSION</constant></entry>
      <entry>Jedna lub więcej rekurencji rekursywnych w wartości do zakodowania</entry>
      <entry></entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_INF_OR_NAN</constant></entry>
      <entry>
       Jedna lub więcej wartości
       <link linkend="language.types.float.nan"><constant>NAN</constant></link>
       lub <link linkend="function.is-infinite"><constant>INF</constant></link>
       do zakodowania
      </entry>
      <entry></entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_UNSUPPORTED_TYPE</constant></entry>
      <entry>Podano wartość typu, który nie może być zakodowany</entry>
      <entry>PHP 5.5.0</entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_INVALID_PROPERTY_NAME</constant></entry>
      <entry>Podano nazwę własności, która nie może być zdekodowana</entry>
      <entry></entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_UTF16</constant></entry>
      <entry>Niepoprawne znaki UTF-16, prawdopodobnie źle zakodowane</entry>
      <entry></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Przykład użycia <function>json_last_error</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Prawidłowy łańcuch znaków JSON
$json[] = '{"Organizacja": "PHP Documentation Team"}';

// Nieprawidłowy łańcuch znaków JSON spowoduje błąd składni.
// W tym przypadku został użyty znak ' zamiast "
$json[] = "{'Organizacja': 'PHP Documentation Team'}";


foreach($json as $string) {
    echo 'Dekodowanie: ' . $string;
    json_decode($string);

    switch(json_last_error()) {
        case JSON_ERROR_NONE:
            echo ' - Brak błędów';
        break;
        case JSON_ERROR_DEPTH:
            echo ' - Przekroczono maksymalny poziom zagnieżdżania danych';
        break;
        case JSON_ERROR_STATE_MISMATCH:
            echo ' - Niedopełnienie lub niezgodność trybów';
        break;
        case JSON_ERROR_CTRL_CHAR:
            echo ' - Znaleziono niespodziewany znak kontrolny';
        break;
        case JSON_ERROR_SYNTAX:
            echo ' - Błąd składni. Źle skonstruowany JSON';
        break;
        case JSON_ERROR_UTF8:
            echo ' - Źle skonstruowane znaki UTF-8, prawdopodobnie nieprawidłowo zakodowane';
        break;
        default:
            echo ' - Nieznany błąd';
        break;
    }

    echo PHP_EOL;
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Decoding: {"Organizacja": "PHP Documentation Team"} - Brak błędów
Decoding: {'Organizacja': 'PHP Documentation Team'} - Błąd składni. Źle skonstruowany JSON
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Przykład użycia <function>json_last_error</function> z <function>json_encode</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Nieprawidłowa sekwencja UTF-8
$text = "\xB1\x31";

$json  = json_encode($text);
$error = json_last_error();

var_dump($json, $error === JSON_ERROR_UTF8);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(4) "null"
bool(true)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>json_last_error</function> i <constant>JSON_THROW_ON_ERROR</constant></title>
    <programlisting role="php">
<![CDATA[
<?php
// Niepoprawna sekwencja UTF8, która powoduje JSON_ERROR_UTF8
json_encode("\xB1\x31");

// Następujący kod nie powoduje błędu JSON
json_encode('okay', JSON_THROW_ON_ERROR);

// Globalny stan błędu nie został zmieniony przez powyższe wywołanie json_encode()
var_dump(json_last_error() === JSON_ERROR_UTF8);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>json_last_error_msg</function></member>
    <member><function>json_decode</function></member>
    <member><function>json_encode</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
