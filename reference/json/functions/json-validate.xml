<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d715365c098db000eaf7dcd987ee6093f6e83091 Maintainer: sobak Status: ready -->
<!-- $Revision$ -->
<refentry xml:id="function.json-validate" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>json_validate</refname>
  <refpurpose>Sprawdza czy łańcuch znaków zawiera poprawny JSON</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>json_validate</methodname>
   <methodparam><type>string</type><parameter>json</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>depth</parameter><initializer>512</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Sprawdza czy podany &string; jest składniowo poprawnym JSON-em.
   Jeśli <function>json_validate</function> zwróci &true;, <function>json_decode</function>
   będzie w stanie pomyślnie odkodować podany ciąg znaków, przy użyciu tych samych
   parametrów <parameter>depth</parameter> i <parameter>flags</parameter>.
  </para>
  <para>
   Jeśli <function>json_validate</function> zwróci &false;, to przyczyna
   niepowodzenia może być pobrana za pomocą <function>json_last_error</function> oraz
   <function>json_last_error_msg</function>.
  </para>
  <para>
   <function>json_validate</function> używa mniej pamięci niż
   <function>json_decode</function> jeśli podane dane wejściowe JSON
   nie są używane, ponieważ nie ma potrzeby budowania struktury tablicy
   lub obiektu zawierającej dane.
  </para>
  <caution>
   <para>
    Wywołanie <function>json_validate</function> bezpośrednio przed
    <function>json_decode</function> spowoduje niepotrzebne dwukrotne
    parsowanie, jako że <function>json_decode</function> także przeprowadza
    walidację podczas odkodowywania.
   </para>
   <para>
    W związku z tym <function>json_validate</function> powinna być używana tylko,
    jeśli dane JSON nie będą wykorzystane natychmiast, a chcemy wiedzieć jedynie
    czy ciąg znaków zawiera poprawny JSON.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>json</parameter></term>
     <listitem>
      <para>
       Ciąg znaków do sprawdzenia.
      </para>
      <para>
       Ta funkcja działa tylko z ciągami znaków zakodowanymi w UTF-8.
      </para>
      &json.implementation.superset;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>depth</parameter></term>
     <listitem>
      <para>
       Maksymalna głębokość zagnieżdżenia dekodowanej struktury.
       Wartość musi być większa niż <literal>0</literal>,
       i mniejsza bądź równa <literal>2147483647</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Obecnie obsługiwana jest tylko flaga
       <constant>JSON_INVALID_UTF8_IGNORE</constant>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Zwraca &true; jeśli podany ciąg znaków to składniowo poprawny JSON, w przeciwnym razie
   zwraca &false;.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Jeżeli parametr <parameter>depth</parameter> jest poza dozwolonym zakresem,
   rzucany jest <classname>ValueError</classname>.
  </para>
  <para>
   Jeżeli parametr <parameter>flags</parameter> nie jest poprawną flagą,
   rzucany jest <classname>ValueError</classname>.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Przykłady użycia<function>json_validate</function></title>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(json_validate('{ "test": { "foo": "bar" } }'));
var_dump(json_validate('{ "": "": "" } }'));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
bool(false)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>json_decode</function></member>
    <member><function>json_last_error</function></member>
    <member><function>json_last_error_msg</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
