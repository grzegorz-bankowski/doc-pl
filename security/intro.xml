<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 96c9d88bad9a7d7d44bfb7f26c226df7ee9ddf26 Maintainer: sobak Status: ready -->
<!-- splitted from ./index.xml, last change in rev 1.66 -->
 <chapter xml:id="security.intro" xmlns="http://docbook.org/ns/docbook">
  <title>Wprowadzenie</title>
  <simpara>
   PHP jest potężnym językiem i interpreterem, niezależnie czy jest dołączony
   do serwera WWW jako moduł, czy wykonywany jako osobny program
   <acronym>CGI</acronym>, ma dostęp do plików, możliwość wykonywania
   komend i otwierania połączeń sieciowych na serwerze. Te
   cechy powodują, że wszystko uruchamiane na serwerze jest z definicji niebezpieczne.
   PHP został zaprojektowany w taki sposób, aby był bardziej bezpiecznym językiem do
   tworzenia programów <acronym>CGI</acronym> niż Perl lub C i przy wybraniu odpowiednich
   opcji konfiguracyjnych podczas konfiguracji i w czasie działania oraz przy zastosowaniu
   poprawnych praktyk pisania kodu, może Ci zaoferować dokładnie taką kombinację wolności
   i bezpieczeństwa, jakiej potrzebujesz.
  </simpara>
  <simpara>
   Jako że istnieje wiele sposobów wykorzystania PHP, istnieje też wiele
   opcji konfiguracyjnych kontrolujących jego zachowanie. Szeroki
   wybór opcji pozwala na zastosowanie PHP w wielu
   celach, ale oznacza też, że istnieją kombinacje tych
   opcji i konfiguracji serwera, które skutkują niebezpiecznymi
   ustawieniami.
  </simpara>
  <simpara>
   Elastyczność konfiguracji PHP jest równie duża co elastyczność
   tworzonego w nim kodu. PHP może być wykorzystane do stworzenia kompletnych
   aplikacji serwerowych z całą potęgą użytkownika powłoki, bądź może być wykorzystane
   dla prostych skryptów po stronie serwera z niewielkim ryzykiem, uruchamianych
   w ściśle kontrolowanym środowisku. To jak zbudowane jest to środowisko
   i jak bardzo jest bezpieczne, zależy w dużej części od programisty PHP.
  </simpara>
  <simpara>
   Ten rozdział rozpoczyna się od ogólnych porad bezpieczeństwa, tłumaczy
   różne kombinacje opcji konfiguracyjnych i sytuacje,
   w których mogą być bezpiecznie użyte. Opisuje też różne uwagi odnośnie
   pisania kodu, aby osiągnąć różne poziomy bezpieczeństwa.
  </simpara>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
