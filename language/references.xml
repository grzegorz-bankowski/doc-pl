<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: n/a Maintainer: dombal Status: ready -->
<!-- $Revision$ -->
 <chapter xml:id="language.references" xmlns="http://docbook.org/ns/docbook">
  <title>Referencje</title>

  <sect1 xml:id="language.references.whatare">
   <title>Czym są referencje</title>
   <simpara>  
    W PHP referencje są środkiem dostępu do tej samej wartości zmiennej
    poprzez różne nazwy. Nie działają na takiej zasadzie jak wskaźniki w C,
    lecz są aliasami w tablicy symboli. Zwróc uwagę na to, że w PHP nazwa
    zmiennej oraz wartość zmiennej są dwiema różnymi rzeczami, wobec tego ta
    sama wartość może być dostępna poprzez różne nazwy. Najbliższą analogią
    jest Uniksowy system plików i ich nazw - nazwy zmiennych to wpisy
    katalogowe, a wartości to same pliki. Można myśleć o referencjach jak o
    twardych dowiązaniach w Uniksowym systemie plików.
   </simpara>
  </sect1>

  <sect1 xml:id="language.references.whatdo">
   <title>Co robią referencje</title>
   <para>
    W PHP referencje pozwalają na stworzenie dwu zmiennych zawierających tą
    samą zawartość. Więc poniższy skrypt:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$a =& $b 
?>
]]>
     </programlisting>
    </informalexample>
    znaczy tyle, że <varname>$a</varname> oraz <varname>$b</varname>
    wskazują na tą samą zmienną.
    <note>
     <para>
      <varname>$a</varname> oraz <varname>$b</varname> są całkowicie równe,
      czyli nie <varname>$a</varname> wskazuje na <varname>$b</varname> lub
      odwrotnie, lecz <varname>$a</varname> oraz <varname>$b</varname>
      wskazują na to samo miejsce.
     </para>
    </note>
   </para>
   <para>
    Ta sama składnia może być używana z funkcjami zwracającymi referencje, i z
    operatorem <literal>new</literal> (w PHP 4.0.4 i późniejszych):
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$bar =& new foo_klasa();
$foo =& znajdx_zmienna($bar);
?>
]]>
    </programlisting>
    </informalexample>
    </para>
    <note>
     <para>
      Brak operatora <literal>&amp;</literal> powoduje powstanie kopii
      obiektu. Jeżeli użyjesz <literal>$this</literal> wewnątrz klasy, zmienna
      ta będzie pracować na bieżącym egzemplarzu danej klasy. Dowiązanie bez
      użycia <literal>&amp;</literal> spowoduje powstanie kopii egzemplarza
      danej klasy (czyli naszego obiektu) i <literal>$this</literal> będzie
      pracować na kopii, co nie jest zwykle tym czego byśmy chcieli. Zwykle
      pożądane jest posiadanie tylko jednego egzemplarza z którym chcemy
      pracować, z powodów wydajności i zajętości pamięci.
     </para>
     <para>
      Pomimo tego, że możliwe jest użycie operatora <literal>@</literal> do
      <emphasis>wyciszenia</emphasis> ewentualnych błędów w konstruktorze
      podczas użycia go w konstrukcji <literal>@new</literal>, to zapis ten
      nie działa kiedy używana jest konstrukcja <literal>&amp;new</literal>.
      Jest to ograniczenie silnika Zend (Zend Engine) i użycie takiego zapisu
      spowoduje błąd parsowania.
     </para>
   </note>
   <para>
    Drugą rzeczą na którą pozwalają referencje jest przekazywanie zmiennych
    przez-referencje. Możliwe jest to przez uczynienie zmiennej lokalnej w
    funkcji i zmiennej w zakresie wywoływania tej funkcji odwołujacych się do
    tej samej wartości. Na przykład:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function foo (&$zmienna)
{
    $zmienna++;
}

$a=5;
foo ($a);
?>
]]>
     </programlisting>
    </informalexample>
    spowoduje, że <varname>$a</varname> będzie równe 6. Dzieje się tak,
    ponieważ w funkcji <varname>foo</varname> zmienna
    <varname>$zmienna</varname> odwołuje się do tej samaj zawartości jak
    zmienna <varname>$a</varname>. Zobacz również bardiej dokładne wyjaśniena
    na temat <link
    linkend="language.references.pass">przekazywania przez referencję</link>.
   </para>
   <simpara>
    Trzecią rzeczą którą umożliwiają referencje jest <link
    linkend="language.references.return">zwracanie przez referencje</link>.
   </simpara>
  </sect1>

  <sect1 xml:id="language.references.arent">
   <title>Czym nie są referencje</title>
   <para>
    Jak powiedizano wcześniej, referencje nie są wskaźnikami. To znaczy, że
    poniższy zapis nie zadziała tak jak się wydaje:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function foo (&$zmienna)
{
    $zmienna =& $GLOBALS["baz"];
}
foo($bar);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    To, co się faktycznie dzieje, to zmienna <varname>$zmienna</varname> w
    funkcji <varname>foo</varname> będzie związana ze zmienną
    <varname>$bar</varname> podczas wywołania, lecz zaraz potem będzie
    związana po raz wtóry, tym razem z <varname>$GLOBALS["baz"]</varname>. Nie
    ma sposobu by związać <varname>$bar</varname> w zakresie wywoływującym
    funkcję z czymś innym, używając mechanizmu referencji, ponieważ zmienna
    <varname>$bar</varname> nie jest dostępna w funkcji <varname>foo</varname>
    (jest tylko reprezentowana przez zmienną <varname>$zmienna</varname>,
    lecz <varname>$zmienna</varname> zawiera tylko wartość zmiennej, a nie
    jest wiązaniem nazwa-wartość w tablicy symboli).
   </simpara>
  </sect1>

  <sect1 xml:id="language.references.pass">
   <title>Przekazywanie przez referencje</title>
   <para>
    Możesz przekazać zmienną do funkcji poprzez referencję, by funkcja mogła
    modyfikować swoje parametry. Skłania jest jak następuje:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function foo (&$zmienna)
{
    $zmienna++;
}

$a=5;
foo ($a);
// $a jest równe 6 w tym momencie
?>
]]>
     </programlisting>
    </informalexample>
    Weź pod uwagę to, że nie ma znaku odwoływania się przez referencję przy
    wywoływaniu funkcji - istnieje tylko w definicji funkcji. Sama definicja
    funkcji jest wystarczającym miejscem do zaznaczenia przekazywania
    argumentów przez referencję.
  </para>
  <para>
   Przez referencję mogą być przekazywane następujące rzeczy:
   <itemizedlist>
    <listitem>
     <simpara>
      Zmienne, np. <literal>foo($a)</literal>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Instrukcja new, np. <literal>foo(new foobar())</literal>
     </simpara>
    </listitem>
    <listitem>
     <para>
      Referencję, zwracane z funkcji, np.:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function &bar()
{
    $a = 5;
    return $a;
}
foo(bar());
?>
]]>
     </programlisting>
    </informalexample>
    Zobacz również wyjaśnienia na temat <link
    linkend="language.references.return">zwracania przez referencję</link>. 
     </para>
    </listitem>
  </itemizedlist>
  </para>
  <para>
   Każde inne wyrażenie nie powinno być przekazywane przez referencję,
   ponieważ wynik takiego przekazania jest nieprzewidywalny. Dla przykładu,
   poniższe przykłady przekazywania przez referencję są niepoprawne:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function bar() // Zwróć uwagę na brak &
{
    $a = 5;
    return $a;
}
foo(bar());

foo($a = 5); // Wyrażenie, nie zmienna
foo(5); // Stała, nie zmienna
?>
]]>
     </programlisting>
    </informalexample>
    Te wymagania są dla PHP 4.0.4 i wyższych wersji.
  </para>
  </sect1>

  <sect1 xml:id="language.references.return">
   <title>Zwracanie referencji</title>
   <para>
    Zwracanie przez-referencję jest użyteczne gdy chcesz użyć funkcji do
    znalezienia zmiennej do której referencją powinna być dowiązana. Zwracając
    referencje używaj tej składni:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function &znajdz_zmienna ($param)
{
    /* ...kod... */
    return $znaleziona_zmienna;
}

$foo =& znajdz_zmienna ($bar);
$foo->x = 2;
?>
]]>
     </programlisting>
    </informalexample>
    W tym przykładzie, będzie zmieniona właściwość obiektu zwróconego przez
    funkcję <varname>znajdz_zmienna</varname>, a nie właściwość kopii obiektu,
    jak to by było bez użycia składni referencji.
   </para>
   <note>
    <simpara>
     Inaczej niż przy przekazywaniu parametrów, tutaj musisz używać
     <literal>&amp;</literal> w obu miejscach - by wskazać, że zwracasz
     przez-referencję, a nie kopię jak normalnie, i by zwrócić uwagę, że
     dla zmiennej <varname>$foo</varname> powinno być użyte powiązanie przez
     referencję, a nie zwykłe przypisanie.
    </simpara>
   </note>
  </sect1>

  <sect1 xml:id="language.references.unset">
   <title>Niszczenie referencji</title>
   <para>
    Kiedy niszczysz referencje, zrywasz wiązanie między nazwą zmiennej a jej
    zawartością. Nie znaczy to, że ta zawartość będzie zniszczona. Na
    przykład:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$a = 1;
$b =& $a;
unset ($a); 
?>
]]>
     </programlisting>
    </informalexample>
    nie zniszczy <varname>$b</varname>, tylko <varname>$a</varname>. 
   </para>
   <simpara>
    Znów, pomocne będzie pomyślenie o tym jak o analogii do Uniksowego
    wywołania <command>unlink</command>.
   </simpara>
  </sect1>

  <sect1 xml:id="language.references.spot">
   <title>Znajdywanie referencji</title>
   <simpara>
    Wiele konstrukcji składniowych w PHP jest zaimplementowanych przy użyciu
    referencji, tak więc wszystko co zostało powiedziane wcześniej o
    referencjach dotyczyć będzie również tych konstrukcji. Pewne konstrukcje,
    jak przekazywanie i zwracanie przez referencje, są wspomniane wyżej.
    Innymi konstrukcjami używającymi mechanizmu referencji są:
   </simpara>

   <sect2 xml:id="references.global">
    <title>Referencje konstrukcji <literal>global</literal></title>
    <para>
     Kiedy deklarujesz zmienną jako <command>global $var</command> to tak
     naprawdę tworzysz referencję do zmiennej globalnej. To znaczy, że działa
     to tak samo jak:
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$zmienna =& $GLOBALS["zmienna"];
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     To znaczy, na przykład, że usunięcie <varname>$zmienna</varname>
     nie usunie zmiennej globalnej.
    </simpara>
   </sect2>

   <sect2 xml:id="references.this">
    <title><literal>$this</literal></title>
    <simpara>
     W metodach obiektowych, <varname>$this</varname> jest zawsze referencją
     do obiektu wywłującego daną metodę.
    </simpara>
   </sect2>
  </sect1>

 </chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
