<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 9ee9eccf455188ab6eb352194eb6f9eb99e15606 Maintainer: sobak Status: ready -->
 <sect1 xml:id="language.oop5.abstract" xmlns="http://docbook.org/ns/docbook">
  <title>Abstrakcja klas</title>

  <para>
   PHP oferuje klasy i metody abstrakcyjne.
   Klasy zdefiniowane jako abstrakcyjne nie mogą być instancjonowane, a każda klasa która
   zawiera przynajmniej jedną metodę abstrakcyjną też musi być abstrakcyjna.
   Metody określone jako abstrakcyjne określają tylko sygnaturę metody,
   nie mogą określać implementacji.
  </para>

  <para>
   Podczas dziedziczenia z klasy abstrakcyjnej wszystkie metody oznaczone jako abstrakcyjne w
   deklaracji klasy rodzica muszą być zdefiniowane przez klasę potomną
   i przestrzegać standardowych reguł
   <link linkend="language.oop5.inheritance">dziedziczenia</link> and
   <link linkend="language.oop.lsp">kompatybilności sygnatur</link>.
  </para>

  <example>
   <title>Przykład klasy abstrakcyjnej</title>
    <programlisting role="php">
<![CDATA[
<?php
abstract class AbstractClass
{
    // Wymuś aby rozszerzająca klasa zaimplementowała te metody
    abstract protected function getValue();
    abstract protected function prefixValue($prefix);

    // Wspólna metoda
    public function printOut() {
        print $this->getValue() . "\n";
    }
}

class KonkretnaKlasa1 extends AbstractClass
{
    protected function getValue() {
        return "KonkretnaKlasa1";
    }

    public function prefixValue($prefix) {
        return "{$prefix}KonkretnaKlasa1";
    }
}

class KonkretnaKlasa2 extends AbstractClass
{
    public function getValue() {
        return "KonkretnaKlasa2";
    }

    public function prefixValue($prefix) {
        return "{$prefix}KonkretnaKlasa2";
    }
}

$class1 = new KonkretnaKlasa1;
$class1->printOut();
echo $class1->prefixValue('FOO_') ."\n";

$class2 = new KonkretnaKlasa2;
$class2->printOut();
echo $class2->prefixValue('FOO_') ."\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
KonkretnaKlasa1
FOO_KonkretnaKlasa1
KonkretnaKlasa2
FOO_KonkretnaKlasa2
]]>
   </screen>
  </example>

  <example>
   <title>Przykład klasy abstrakcyjnej</title>
    <programlisting role="php">
<![CDATA[
<?php
abstract class AbstractClass
{
    // Nasza abstrakcyjna metoda musi zdefiniować tylko wymagane argumenty
    abstract protected function prefixName($name);

}

class KonkretnaKlasa extends AbstractClass
{

    // Nasza klasa dziedzcząca może zdefiniować dodatkowe argumenty nieobecne w sygnaturze rodzica
    public function prefixName($name, $separator = ".") {
        if ($name == "Pacman") {
            $prefix = "Mr";
        } elseif ($name == "Pacwoman") {
            $prefix = "Mrs";
        } else {
            $prefix = "";
        }
        return "{$prefix}{$separator} {$name}";
    }
}

$class = new KonkretnaKlasa;
echo $class->prefixName("Pacman"), "\n";
echo $class->prefixName("Pacwoman"), "\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Mr. Pacman
Mrs. Pacwoman
]]>
   </screen>
  </example>
 </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
