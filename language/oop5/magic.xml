<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 5e15a6c3e4d5819102361ae78e73c90a06238c8a Maintainer: sobak Status: ready -->
 <sect1 xml:id="language.oop5.magic" xmlns="http://docbook.org/ns/docbook">
  <title>Metody magiczne</title>
  <para>
   Metody magiczne to specjalne metody, które nadpisują domyślne działanie PHP
   w chwili wykonywania określonych działań na obiekcie.
  </para>
  <caution>
   <simpara>
    Wszystkie metody rozpoczynające się od <literal>__</literal> są zarezerwowane dla PHP.
    W związku z tym nie zaleca się używania takich nazw metod, o ile nie nadpisujemy
    zachowania PHP.
   </simpara>
  </caution>
  <para>
   Następujące metody uważane są za magiczne:
   <!-- Should be an itemized list ? -->
   <link linkend="object.construct">__construct()</link>,
   <link linkend="object.destruct">__destruct()</link>,
   <link linkend="object.call">__call()</link>,
   <link linkend="object.callstatic">__callStatic()</link>,
   <link linkend="object.get">__get()</link>,
   <link linkend="object.set">__set()</link>,
   <link linkend="object.isset">__isset()</link>,
   <link linkend="object.unset">__unset()</link>,
   <link linkend="object.sleep">__sleep()</link>,
   <link linkend="object.wakeup">__wakeup()</link>,
   <link linkend="object.serialize">__serialize()</link>,
   <link linkend="object.unserialize">__unserialize()</link>,
   <link linkend="object.tostring">__toString()</link>,
   <link linkend="object.invoke">__invoke()</link>,
   <link linkend="object.set-state">__set_state()</link>,
   <link linkend="object.clone">__clone()</link> i
   <link linkend="object.debuginfo">__debugInfo()</link>.
  </para>

  <warning>
   <!-- See for a code example of this behaviour: https://3v4l.org/Bov34 -->
   <simpara>
    Wszystkie metody magiczne z wyjątkiem
    <link linkend="object.construct">__construct()</link>,
    <link linkend="object.destruct">__destruct()</link> i
    <link linkend="object.clone">__clone()</link>,
    <emphasis>must</emphasis> muszą być zadeklarowane jako publiczne (<literal>public</literal>),
    w przeciwnym razie zostanie wygenerowane ostrzeżenie (<constant>E_WARNING</constant>).
    Przed PHP 8.0.0 nie było generowane ostrzeżenie dla metod
    <link linkend="object.sleep">__sleep()</link>,
    <link linkend="object.wakeup">__wakeup()</link>,
    <link linkend="object.serialize">__serialize()</link>,
    <link linkend="object.unserialize">__unserialize()</link>, and
    <link linkend="object.set-state">__set_state()</link>.
   </simpara>
  </warning>
  <warning>
   <para>
    Jeśli w definicji metody magicznej użyte są typy, to
    muszą być identyczne z sygnaturą opisaną w tym dokumencie.
    W przeciwnym razie wystąpi błąd krytyczny.
    Przed PHP 8.0.0 nie było to sprawdzane.
    Metody <link linkend="object.construct">__construct()</link> i
    <link linkend="object.destruct">__destruct()</link> nie mogą jednak określać zwracanego typu danych,
    spowodowałoby to błąd krytyczny.
   </para>
  </warning>
 
  <sect2 xml:id="language.oop5.magic.sleep">
   <title>
    <link linkend="object.sleep">__sleep()</link> i
    <link linkend="object.wakeup">__wakeup()</link>
   </title>
   
   <methodsynopsis xml:id="object.sleep">
    <modifier>public</modifier> <type>array</type><methodname>__sleep</methodname>
    <void/>
   </methodsynopsis>
   <methodsynopsis xml:id="object.wakeup">
    <modifier>public</modifier> <type>void</type><methodname>__wakeup</methodname>
    <void/>
   </methodsynopsis>
   
   <para>
    <function>serialize</function> sprawdza czy klasa ma metodę o
    magicznej nazwie <link linkend="object.sleep">__sleep()</link>. Jeśli tak, to ta metoda
    jest wywoływana przed każdą serializacją. Może być użyta aby wyczyścić obiekt
    i powinna zwrócić tablicę z nazwami wszystkich zmiennych
    tego obiektu, które powinny być zserializowane.
    Jeśli metoda nic nie zwróci, to wynikiem serializacji będzie &null; i
    zostanie wygenerowany komunikat <constant>E_NOTICE</constant>.
   </para>
   <note>
    <para>
     <link linkend="object.sleep">__sleep()</link> nie może zwrócić nazw
     właściwości prywatnych z klas rodziców. Taki kod spowoduje
     błąd o poziomie <constant>E_NOTICE</constant>.
     Użyj <link linkend="object.serialize">__serialize()</link> w zamian.
    </para>
   </note>
   <note>
    <para>
     Od PHP 8.0.0 zwrócenie wartości innej niż tablica z <link linkend="object.sleep">__sleep()</link> generuje ostrzeżenie, wcześniej było to <constant>E_NOTICE</constant>.
    </para>
   </note>
   <para>
    Zamierzonym zastosowaniem <link linkend="object.sleep">__sleep()</link> jest zapisanie oczekujących
    danych lub podobne operacje czyszczące. Ta funkcja jest też
    przydatna, jeśli bardzo duży obiekt nie musi być serializowany w całości.
   </para>
   <para>
    Analogicznie <function>unserialize</function> sprawdza czy
    istnieje metoda o nazwie 
    <link linkend="object.wakeup">__wakeup()</link>. Jeśli tak, może ona
    odtworzyć dowolne zasoby, które mógł mieć obiekt.
   </para>
   <para>
    Zamierzonym użyciem <link linkend="object.wakeup">__wakeup()</link> jest np.
    ponowne nawiązanie połączenia z bazą danych, które mogło być utracone
    podczas serializacji oraz wykonanie innych zadań związanych z
    ponowną inicjalizacją obiektu.
   </para>
   <example>
    <title>Metody sleep oraz wakeup</title>
    <programlisting role="php">
<![CDATA[
<?php
class Connection
{
    protected $link;
    private $dsn, $username, $password;
    
    public function __construct($dsn, $username, $password)
    {
        $this->dsn = $dsn;
        $this->username = $username;
        $this->password = $password;
        $this->connect();
    }
    
    private function connect()
    {
        $this->link = new PDO($this->dsn, $this->username, $this->password);
    }
    
    public function __sleep()
    {
        return array('dsn', 'username', 'password');
    }
    
    public function __wakeup()
    {
        $this->connect();
    }
}?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.magic.serialize">
   <title>
    <link linkend="object.serialize">__serialize()</link> i
    <link linkend="object.unserialize">__unserialize()</link>
   </title>

   <methodsynopsis xml:id="object.serialize">
    <modifier>public</modifier> <type>array</type><methodname>__serialize</methodname>
    <void/>
   </methodsynopsis>
   <methodsynopsis xml:id="object.unserialize">
    <modifier>public</modifier> <type>void</type><methodname>__unserialize</methodname>
    <methodparam><type>array</type><parameter>data</parameter></methodparam>
   </methodsynopsis>

   <para>
    <function>serialize</function> sprawdza czy klasa ma metodę o
    magicznej nazwie <link linkend="object.serialize">__serialize()</link>. Jeśli tak, to ta metoda
    jest wykonywana przed każdą serializacją. Musi stworzyć i zwrócić tablicę asocjacyjną z parami klucz/wartość,
    które reprezentują zserializowaną formę obiektu. Jeżeli nie jest zwrócona tablica, rzucony zostanie
    <classname>TypeError</classname>.
   </para>
   <note>
    <para>
     Jeżeli dany obiekt definiuje zarówno <link linkend="object.serialize">__serialize()</link> i
     <link linkend="object.sleep">__sleep()</link>, to wywołana będzie tylko <link linkend="object.serialize">__serialize()</link>.
     Metoda <link linkend="object.sleep">__sleep()</link> będzie zignorowana. Jeżeli obiekt implementuje interfejs
     <link linkend="class.serializable">Serializable</link>, to metoda <literal>serialize()</literal> z interfejsu będzie ignorowana, a
     zamiast tego użyta zostanie <link linkend="object.serialize">__serialize()</link>.
    </para>
   </note>
   <para>
    Zamierzonym zastosowaniem <link linkend="object.serialize">__serialize()</link> jest określenie własnej reprezentacji
    obiektu przyjaznej dla serializacji. Elementy tablicy mogą odnosić się do właściwości obiektu, ale
    nie jest to wymagane.
   </para>
   <para>
    Analogicznie funkcja <function>unserialize</function> sprawdza
    czy obiekt ma metodę o nazwie
    <link linkend="object.unserialize">__unserialize()</link>. Jeżeli tak, to do tej metody będzie przekazana
    odtworzona tablica zwrócona przez <link linkend="object.serialize">__serialize()</link>. Może ona
    wtedy odtworzyć właściwości obiektu z tej tablicy w odpowiedni sposób.
   </para>
   <note>
    <para>
     Jeżeli dany obiekt definiuje zarówno <link linkend="object.unserialize">__unserialize()</link> oraz
     <link linkend="object.wakeup">__wakeup()</link>, to będzie wywołane tylko <link linkend="object.unserialize">__unserialize()</link>.
     Metoda <link linkend="object.wakeup">__wakeup()</link> będzie zignorowana.
    </para>
   </note>
   <note>
    <para>
     Ta funkcjonalność jest dostępna od PHP 7.4.0.
    </para>
   </note>
   <example>
    <title>Metody serialize i unserialize</title>
    <programlisting role="php">
<![CDATA[
<?php
class Connection
{
    protected $link;
    private $dsn, $username, $password;

    public function __construct($dsn, $username, $password)
    {
        $this->dsn = $dsn;
        $this->username = $username;
        $this->password = $password;
        $this->connect();
    }

    private function connect()
    {
        $this->link = new PDO($this->dsn, $this->username, $this->password);
    }

    public function __serialize(): array
    {
        return [
          'dsn' => $this->dsn,
          'user' => $this->username,
          'pass' => $this->password,
        ];
    }

    public function __unserialize(array $data): void
    {
        $this->dsn = $data['dsn'];
        $this->username = $data['user'];
        $this->password = $data['pass'];

        $this->connect();
    }
}?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.magic.tostring">
   <title><link linkend="object.tostring">__toString()</link></title>
   <methodsynopsis xml:id="object.tostring">
    <modifier>public</modifier> <type>string</type><methodname>__toString</methodname>
    <void/>
   </methodsynopsis>
   <para>
    Metoda <link linkend="object.tostring">__toString()</link> pozwala klasie zdecydować
    jak zachowa się, gdy będzie potraktowana jako ciąg znaków. Na przykład
    co wyświetli <literal>echo $obiekt;</literal>.
   </para>
   <warning>
    <para>
     Od PHP 8.0.0 zwracana wartość podlega standardowym regułom typów PHP,
     tj. będzie zrzutowana na <type>string</type> jeśli to możliwe i jeśli
     <link linkend="language.types.declarations.strict">ścisłe typowanie</link>
     jest wyłączone.
    </para>
    <para>
     Obiekt implementujący interfejs <interfacename>Stringable</interfacename>
     <emphasis>nie</emphasis> będzie akceptowalny dla deklaracji typu <type>string</type> jeśli
     włączone jest <link linkend="language.types.declarations.strict">ścisłe typowanie</link>.
     Jeśli chcesz takiego zachowania, to deklaracja typu musi akceptować
     <interfacename>Stringable</interfacename> oraz <type>string</type> jako unię typów.
    </para>
    <para>
     Od PHP 8.0.0 każda klasa, która zawiera metodę <link linkend="object.tostring">__toString()</link>
     automatycznie implementuje interfejs <interfacename>Stringable</interfacename>, a więc
     pomyślnie przejdzie sprawdzenie typu dla tego interfejsu. Zaleca się mimo wszystko jawnie zaimplementować
     ten interfejs.
    </para>
    <para>
     W PHP 7.4 zwracanym typem <emphasis>musi</emphasis> być
     <type>string</type>, w przeciwnym razie zostanie rzucony <classname>Error</classname>.
    </para>
    <para>
     Przed PHP 7.4.0 zwróconą wartością <emphasis>musi</emphasis> być
     <type>string</type>, w przeciwnym razie wygenerowany zostanie błąd krytyczny
     <constant>E_RECOVERABLE_ERROR</constant>.
    </para>
   </warning>
   <warning>
    <simpara>
     Rzucenie wyjątku z wewnątrz
     <link linkend="object.tostring">__toString()</link>
     nie było możliwe przed PHP 7.4.0. Próba zrobienia tego
     powodowała błąd krytyczny.
    </simpara>
   </warning>
   <example>
    <title>Prosty przykład</title>
    <programlisting role="php">
<![CDATA[
<?php
// Tworzymy prostą klasę
class TestClass
{
    public $foo;

    public function __construct($foo)
    {
        $this->foo = $foo;
    }

    public function __toString()
    {
        return $this->foo;
    }
}

$klasa = new TestClass('Hello');
echo $klasa;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hello
]]>
    </screen>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.magic.invoke">
   <title><link linkend="object.invoke">__invoke()</link></title>
   <methodsynopsis xml:id="object.invoke">
    <type>mixed</type><methodname>__invoke</methodname>
    <methodparam rep="repeat"><parameter>values</parameter></methodparam>
   </methodsynopsis>
   <para>
    Metoda <link linkend="object.invoke">__invoke()</link> jest wywoływana gdy skrypt próbuje
    wywołać obiekt jak gdyby był funkcją.
   </para>
   <example>
    <title>Użycie <link linkend="object.invoke">__invoke()</link></title>
    <programlisting role="php">
<![CDATA[
<?php
class CallableClass
{
    public function __invoke($x)
    {
        var_dump($x);
    }
}
$obj = new CallableClass;
$obj(5);
var_dump(is_callable($obj));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
int(5)
bool(true)
]]>
    </screen>
   </example>
   <example>
    <title>Użycie <link linkend="object.invoke">__invoke()</link></title>
    <programlisting role="php">
<![CDATA[
<?php
class Sort
{
    private $key;

    public function __construct(string $key)
    {
        $this->key = $key;
    }

    public function __invoke(array $a, array $b): int
    {
        return $a[$this->key] <=> $b[$this->key];
    }
}

$customers = [
    ['id' => 1, 'first_name' => 'John', 'last_name' => 'Do'],
    ['id' => 3, 'first_name' => 'Alice', 'last_name' => 'Gustav'],
    ['id' => 2, 'first_name' => 'Bob', 'last_name' => 'Filipe']
];

// posortuj klientów po imieniu
usort($customers, new Sort('first_name'));
print_r($customers);

// posortuj klientów po nazwisku
usort($customers, new Sort('last_name'));
print_r($customers);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0] => Array
        (
            [id] => 3
            [first_name] => Alice
            [last_name] => Gustav
        )

    [1] => Array
        (
            [id] => 2
            [first_name] => Bob
            [last_name] => Filipe
        )

    [2] => Array
        (
            [id] => 1
            [first_name] => John
            [last_name] => Do
        )

)
Array
(
    [0] => Array
        (
            [id] => 1
            [first_name] => John
            [last_name] => Do
        )

    [1] => Array
        (
            [id] => 2
            [first_name] => Bob
            [last_name] => Filipe
        )

    [2] => Array
        (
            [id] => 3
            [first_name] => Alice
            [last_name] => Gustav
        )

)
]]>
    </screen>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.magic.set-state">
   <title><link linkend="object.set-state">__set_state()</link></title>
   <methodsynopsis xml:id="object.set-state">
    <modifier>static</modifier> <type>object</type><methodname>__set_state</methodname>
    <methodparam><type>array</type><parameter>properties</parameter></methodparam>
   </methodsynopsis>
   <para>
    Ta <link linkend="language.oop5.static">statyczna</link> metoda jest wywoływana
    dla klas eksportowanych funkcją <function>var_export</function>.
   </para>
   <para>
    Jedynym parametrem tej metody jest tablica zawierająca wyeksportowane
    właściwości w postaci <literal>['właściwość' => wartość, ...]</literal>.
   </para>
   <example>
    <title>Użycie <link linkend="object.set-state">__set_state()</link></title>
    <programlisting role="php">
<![CDATA[
<?php

class A
{
    public $var1;
    public $var2;

    public static function __set_state($an_array)
    {
        $obj = new A;
        $obj->var1 = $an_array['var1'];
        $obj->var2 = $an_array['var2'];
        return $obj;
    }
}

$a = new A;
$a->var1 = 5;
$a->var2 = 'foo';

$b = var_export($a, true);
var_dump($b);
eval('$c = ' . $b . ';');
var_dump($c);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(60) "A::__set_state(array(
   'var1' => 5,
   'var2' => 'foo',
))"
object(A)#2 (2) {
  ["var1"]=>
  int(5)
  ["var2"]=>
  string(3) "foo"
}
]]>
    </screen>
   </example>
   <note>
    <simpara>
     Podczas eksportu obiektu <function>var_export</function> nie sprawdza
     czy <link linkend="object.set-state">__set_state()</link> jest
     zaimplementowana przez klasę obiektu, więc ponowny import obiektu spowoduje wyjątek typu <classname>Error</classname>,
     jeżeli metoda __set_state() nie jest zaimplementowana. W szczególności dotyczy to
     niektórych wbudowanych klas.
    </simpara>
    <simpara>
     Upewnienie się, że re-importowane będą tylko obiekty,
     których klasy implementują __set_state(), jest zadaniem programisty.
    </simpara>
   </note>
  </sect2>

  <sect2 xml:id="language.oop5.magic.debuginfo">
   <title><link linkend="object.debuginfo">__debugInfo()</link></title>
   <methodsynopsis xml:id="object.debuginfo">
    <type>array</type><methodname>__debugInfo</methodname>
    <void/>
   </methodsynopsis>
   <para>
    Ta metoda jest wywoływana przez <function>var_dump</function> kiedy wyrzucany
    jest obiekt, aby pobrać właściwości, które powinny być pokazane. Jeśli ta metoda
    nie jest zdefiniowana, to zostaną pokazane wszystkie właściwości
    publiczne, protected i prywatne.
   </para>
   <example>
    <title>Użycie <link linkend="object.debuginfo">__debugInfo()</link></title>
    <programlisting role="php">
<![CDATA[
<?php
class C {
    private $prop;

    public function __construct($val) {
        $this->prop = $val;
    }

    public function __debugInfo() {
        return [
            'właściwośćDoKwadratu' => $this->prop ** 2,
        ];
    }
}

var_dump(new C(42));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(C)#1 (1) {
  ["właściwośćDoKwadratu"]=>
  int(1764)
}
]]>
    </screen>
   </example>
  </sect2>
 </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
