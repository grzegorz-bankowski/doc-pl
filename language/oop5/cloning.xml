<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 28529d3539b850e870e3aa97570f4db0e53daa03 Maintainer: sobak Status: ready -->
 <sect1 xml:id="language.oop5.cloning" xmlns="http://docbook.org/ns/docbook">
  <title>Klonowanie obiektów</title>
  
  <para>
   Tworzenie kopii obiektu z w pełni odzwierciedlonymi właściwościami nie
   zawsze jest pożądanym zachowaniem. Dobrym przykładem potrzeby skopiowania
   konstruktorów jest obiekt okna GTK, który
   przechowuje zasób tego okna GTK. Gdy stworzymy duplikat tego obiektu,
   to możemy chcieć stworzyć nowe okno o takich samych właściwościach,
   więc nowy obiekt powinien przechowywać zasób nowego okna. Innym przykładem jest
   obiekt przechowujący referencję do innego obiektu, z którego korzysta. Gdy
   tworzysz replikę tego obiektu rodzica, prawdopodobnie potrzebna byłaby nowa instancja
   tego drugiego obiektu, w taki sposób, aby replika miała swoją własną kopię.
  </para>

  <para>
   Kopię obiektu tworzy się przy pomocy słowa kluczowego <literal>clone</literal>
   (która wywołuje metodę <link linkend="object.clone">__clone()</link> na
   obiekcie, jeśli to możliwe)
  </para>

  <informalexample>
   <programlisting>
<![CDATA[
$kopia_obiektu = clone $obiekt;
]]>
   </programlisting>
  </informalexample>

  <para>
   Podczas klonowania obiektu PHP wykona powierzchowną kopię wszystkich
   właściwości obiektu. Właściwości, które są referencjami do innych zmiennych
   pozostaną referencjami.
  </para>

  <methodsynopsis xml:id="object.clone">
   <type>void</type><methodname>__clone</methodname>
   <void/>
  </methodsynopsis>

  <para>
   Po sklonowaniu obiektu, jeżeli dostępna jest metoda <link linkend="object.clone">__clone()</link>,
   to zostanie wywołana ona na nowym obiekcie, tak by 
   pozwolić na zmianę wszystkich koniecznych właściwości.
  </para>

  <example>
   <title>Klonowanie obiektu</title>
   <programlisting role="php">
<![CDATA[
<?php
class PodObiekt
{
    static $instancje = 0;
    public $instancja;

    public function __construct() {
        $this->instancja = ++self::$instancje;
    }

    public function __clone() {
        $this->instancja = ++self::$instancje;
    }
}

class KlonowalnaKlasa
{
    public $obiekt1;
    public $obiekt2;

    function __clone()
    {
        // Wymuś kopię this->obiekt, w przeciwnym razie
        // będzie wskazywać na ten sam obiekt.
        $this->obiekt1 = clone $this->obiekt1;
    }
}

$obj = new KlonowalnaKlasa();

$obj->obiekt1 = new PodObiekt();
$obj->obiekt2 = new PodObiekt();

$obj2 = clone $obj;


print "Oryginalny obiekt:\n";
print_r($obj);

print "Sklonowany obiekt:\n";
print_r($obj2);

?> 
]]>
   </programlisting>
   &example.outputs;
   <screen role="php">
<![CDATA[
Oryginalny obiekt:
KlonowalnaKlasa Object
(
    [obiekt1] => PodObiekt Object
        (
            [instancja] => 1
        )

    [obiekt2] => PodObiekt Object
        (
            [instancja] => 2
        )

)
Sklonowany obiekt:
KlonowalnaKlasa Object
(
    [obiekt1] => PodObiekt Object
        (
            [instancja] => 3
        )

    [obiekt2] => PodObiekt Object
        (
            [instancja] => 2
        )

)
]]>

   </screen>

  </example>

  <para>
   Możliwy jest dostęp do właściwości właśnie sklonowanej klasy
   przy użyciu pojedynczego wyrażenia:
  </para>
  <example>
   <title>Dostęp do pola właśnie sklonowanego obiektu</title>
   <programlisting role="php">
<![CDATA[
<?php
$dateTime = new DateTime();
echo (clone $dateTime)->format('Y');
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
2016
]]>
   </screen>
  </example>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
