<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: fc174e8d6162091550edde46159917ee7e5a2e73 Maintainer: sobak Status: ready -->
<sect1 xml:id="language.oop5.constants" xmlns="http://docbook.org/ns/docbook">
 <title>Stałe w klasach</title>
 <para>
  Istnieje możliwość zdefiniowania <link linkend="language.constants">stałych</link>
  dla konkretnej klasy, które pozostają niezmienialne.
  Domyślna widoczność stałych w klasach to <literal>public</literal>.
 </para>
 <note>
  <para>
   Klasy w stałych mogą być zredefiniowane przez klasy potomne.
   Począwszy od PHP 8.1.0, klasy w stałych nie mogą być zredefiniowane przez klasy potomne,
   jeśli zostały zdefiniowane z modyfikatorem <link linkend="language.oop5.final">final</link>.
  </para>
 </note>
 <para>
  Interfejsy też mogą definiować stałe. Zapoznaj się
  z <link linkend="language.oop5.interfaces">dokumentacją interfejsów</link>,
  aby zobaczyć przykłady.
 </para>
 <para>
  Możliwe jest odniesienie się do stałej przy użyciu zmiennej.
  Wartość zmiennej nie może być słowem kluczowym (np. <literal>self</literal>,
  <literal>parent</literal> czy <literal>static</literal>).
 </para>
 <para>
  Stałe w klasach są alokowane raz na klasę, a nie raz dla każdej
  z instancji klasy.
 </para>
 <example>
  <title>Ustawienie i użycie stałej</title>
  <programlisting role="php">
<![CDATA[
<?php
class MojaKlasa
{
    const CONSTANT = 'wartość stałej';

    function showConstant() {
        echo  self::CONSTANT . "\n";
    }
}

echo MojaKlasa::CONSTANT . "\n";

$classname = "MojaKlasa";
echo $classname::CONSTANT . "\n";

$class = new MojaKlasa();
$class->showConstant();

echo $class::CONSTANT."\n";
?>
]]>
  </programlisting>
 </example>
 <para>
  Specjalna stała <constant>::class</constant> pozwala
  na rozwiązanie w pełni kwalifikowanej nazwy klasy w trakcie kompilacji,
  co przydaje się szczególnie dla klas w przestrzeniach nazw:
 </para>
 <example>
  <title>Użycie ::class z klasami w przestrzeniach nazw</title>
  <programlisting role="php">
<![CDATA[
<?php
namespace foo {
    class bar {
    }

    echo bar::class; // foo\bar
}
?>
]]>
  </programlisting>
 </example>

 <example>
  <title>Wyrażenia w stałych klasowych</title>
  <programlisting role="php">
<![CDATA[
<?php
const ONE = 1;
class foo {
    const TWO = ONE * 2;
    const THREE = ONE + self::TWO;
    const SENTENCE = 'Wartość THREE is '.self::THREE;
}
?>
]]>
  </programlisting>
 </example>

 <example>
  <title>Modyfikatory widoczności dla stałych klasach, od PHP 7.1.0</title>
  <programlisting role="php">
<![CDATA[
<?php
class Foo {
    public const BAR = 'bar';
    private const BAZ = 'baz';
}
echo Foo::BAR, PHP_EOL;
echo Foo::BAZ, PHP_EOL;
?>
]]>
  </programlisting>
   &example.outputs.71;
   <screen>
<![CDATA[
bar

Fatal error: Uncaught Error: Cannot access private const Foo::BAZ in …
]]>
   </screen>
 </example>
 <note>
  <para>
   Od PHP 7.1.0 dla stałych klasach dozwolone są modyfikatory widoczności.
  </para>
 </note>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
