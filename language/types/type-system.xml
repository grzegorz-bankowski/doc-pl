<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: f908fff129bcd8ec1605658e06457cb04e5b2b51 Maintainer: sobak Status: ready -->
<sect1 xml:id="language.types.type-system">
 <title>System typów</title>

 <para>
  PHP używa nominalnego systemu typów z silną behawioralną relacją podtypowania.
  Relacja podtypowania jest sprawdzana w czasie kompilacji, podczas gdy weryfikacja
  typów jest sprawdzana dynamicznie w czasie wykonywania.
 </para>

 <para>
  System typów PHP wspiera różne typy atomowe, które można łączyć,
  aby stworzyć bardziej złożone typy. Niektóre z tych typów mogą być zapisane jako
  <link linkend="language.types.declarations">deklaracje typów</link>.
 </para>

 <sect2 xml:id="language.types.type-system.atomic">
  <title>Typy atomowe</title>
  <para>
   Niektóre typy atomowe to wbudowane typy, które są ściśle zintegrowane z
   językiem i nie da się ich odtworzyć typami zdefiniowanymi przez użytkownika.
  </para>

  <para>
   Lista podstawowych typów jest następująca:
   <itemizedlist>
    <listitem>
     <simpara>Typy wbudowane</simpara>
     <itemizedlist>
      <listitem>
       <simpara>
        Typy skalarne:
       </simpara>
       <itemizedlist>
        <listitem>
         <simpara>typ <type>bool</type></simpara>
        </listitem>
        <listitem>
         <simpara>typ <type>int</type></simpara>
        </listitem>
        <listitem>
         <simpara>typ <type>float</type></simpara>
        </listitem>
        <listitem>
         <simpara>typ <type>string</type></simpara>
        </listitem>
       </itemizedlist>
      </listitem>
      <listitem>
       <simpara>typ <type>array</type></simpara>
      </listitem>
      <listitem>
       <simpara>typ <type>object</type></simpara>
      </listitem>
      <listitem>
       <simpara>typ <type>resource</type></simpara>
      </listitem>
      <listitem>
       <simpara>typ <type>never</type></simpara>
      </listitem>
      <listitem>
       <simpara>typ <type>void</type></simpara>
      </listitem>
      <listitem>
       <simpara>
        <link linkend="language.types.relative-class-types">Względne typy klas</link>:
        <type>self</type>, <type>parent</type> i <type>static</type>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <link linkend="language.types.singleton">Typy singetonowe</link>
       </simpara>
       <itemizedlist>
        <listitem>
         <simpara><type>false</type></simpara>
        </listitem>
        <listitem>
         <simpara><type>true</type></simpara>
        </listitem>
       </itemizedlist>
      </listitem>
      <listitem>
       <simpara>
        Typy jednostkowe
       </simpara>
       <itemizedlist>
        <listitem>
         <simpara><type>null</type></simpara>
        </listitem>
       </itemizedlist>
      </listitem>
     </itemizedlist>
    </listitem>
    <listitem>
     <simpara>
      Typy zdefiniowane przez użytkownika (określane też jako typy klasowe)
     </simpara>
     <itemizedlist>
      <listitem>
       <simpara><link linkend="language.oop5.interfaces">Interfejsy</link></simpara>
      </listitem>
      <listitem>
       <simpara><link linkend="language.oop5.basic.class">Klasy</link></simpara>
      </listitem>
      <listitem>
       <simpara><link linkend="language.types.enumerations">Wyliczenia</link></simpara>
      </listitem>
     </itemizedlist>
    </listitem>
    <listitem>
     <simpara>typ <type>callable</type></simpara>
    </listitem>
   </itemizedlist>
  </para>

  <sect3 xml:id="language.types.type-system.atomic.scalar">
   <title>Typy skalarne</title>
   <simpara>
    Wartość jest uznawana za skalarną, jeśli jest typu <type>int</type>,
    <type>float</type>, <type>string</type> lub <type>bool</type>.
   </simpara>
  </sect3>

  <sect3 xml:id="language.types.type-system.atomic.user-defined">
   <title>Typy zdefiniowane przez użytkownika</title>
   <simpara>
    Możliwe jest definiowanie własnych typów przy użyciu
    <link linkend="language.oop5.interfaces">interfejsów</link>,
    <link linkend="language.oop5.basic.class">klas</link> i
    <link linkend="language.types.enumerations">wyliczeń</link>.
    Są one uznawane za typy zdefiniowane przez użytkownika typy klasowe.
    Na przykład może zostać zdefiniowana klasa nazwana <literal>Kot</literal>,
    potem mogą zostać utworzone obiekty typu <literal>Kot</literal>,
    a funkcja może oczekiwać parametru o typie <literal>Kot</literal>.
   </simpara>
  </sect3>
 </sect2>

 <sect2 xml:id="language.types.type-system.composite">
  <title>Typy złożone</title>
  <para>
   Możliwe jest połączenie wielu atomowych typów w typy złożone (kompozytowe).
   PHP pozwala na połączenie typów w następujące sposoby:
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     Przecięcie typów klasowych (interfejsów i nazw klas).
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Unia typów.
    </simpara>
   </listitem>
  </itemizedlist>

  <sect3 xml:id="language.types.type-system.composite.intersection">
   <title>Przecięcie typów</title>
   <para>
    Przecięcie typów akceptuje wartości, które spełniają wiele
    deklaracji typów klasowych, a nie tylko jedną.
    Typy, które tworzą typ będący przecięciem są łączone
    znakiem <literal>&amp;</literal>. W związku z tym przecięcie typów składające
    się z typów <literal>T</literal>, <literal>U</literal>, and
    <literal>V</literal> będzie zapisywane jako <literal>T&amp;U&amp;V</literal>.
   </para>
  </sect3>

  <sect3 xml:id="language.types.type-system.composite.union">
   <title>Unie typów</title>
   <para>
    Unia typów dopuszcza wartości wielu różnych typów,
    a nie tylko jednego.
    Typy, które tworzą unię są łączone
    znakiem <literal>|</literal>. W związku z tym unia typów składająca
    się z typów <literal>T</literal>, <literal>U</literal>, and
    <literal>V</literal> będzie zapisywana jako <literal>T|U|V</literal>.
    Jeżeli jeden z typów w unii jest typem przecinającym się, to musi być otoczony
    nawisami, aby mógł być zapisany jako <acronym>DNF</acronym>:
    <literal>T|(X&amp;Y)</literal>.
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="language.types.type-system.alias">
  <title>Aliasy typów</title>

  <para>
   PHP obsługuje dwa aliasy: <type>mixed</type> oraz
   <type>iterable</type>, które odpowiadają kolejno
   <link linkend="language.types.type-system.composite.union">uniom typów</link>
   <literal>object|resource|array|string|float|int|bool|null</literal>
   oraz <literal>Traversable|array</literal>.
  </para>

  <note>
   <simpara>
    PHP nie obsługuje aliasów typów zdefiniowanych przez użytkownika.
   </simpara>
  </note>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
